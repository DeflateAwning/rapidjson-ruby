# This file is generated by tool/generate_json_compat_test.rb

require "test_helper"

class JSONCompatTest < Minitest::Test
  def test_array_arraysWithSpaces
    json = "[[]   ]"
    expected = [[]]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_array_empty_string
    json = "[\"\"]"
    expected = [""]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_array_empty
    json = "[]"
    expected = []

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_array_ending_with_newline
    json = "[\"a\"]"
    expected = ["a"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_array_false
    json = "[false]"
    expected = [false]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_array_heterogeneous
    json = "[null, 1, \"1\", {}]"
    expected = [nil, 1, "1", {}]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_array_null
    json = "[null]"
    expected = [nil]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_array_with_1_and_newline
    json = "[1\n]"
    expected = [1]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_array_with_leading_space
    json = " [1]"
    expected = [1]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_array_with_several_null
    json = "[1,null,null,null,2]"
    expected = [1, nil, nil, nil, 2]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_array_with_trailing_space
    json = "[2] "
    expected = [2]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number
    json = "[123e65]"
    expected = [1.23e+67]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_0e_1
    json = "[0e+1]"
    expected = [0.0]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_0e1
    json = "[0e1]"
    expected = [0.0]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_after_space
    json = "[ 4]"
    expected = [4]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_double_close_to_zero
    json = "[-0.000000000000000000000000000000000000000000000000000000000000000000000000000001]\n"
    expected = [-1.0e-78]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_int_with_exp
    json = "[20e1]"
    expected = [200.0]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_minus_zero
    json = "[-0]"
    expected = [0]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_negative_int
    json = "[-123]"
    expected = [-123]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_negative_one
    json = "[-1]"
    expected = [-1]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_negative_zero
    json = "[-0]"
    expected = [0]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_real_capital_e
    json = "[1E22]"
    expected = [1.0e+22]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_real_capital_e_neg_exp
    json = "[1E-2]"
    expected = [0.01]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_real_capital_e_pos_exp
    json = "[1E+2]"
    expected = [100.0]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_real_exponent
    json = "[123e45]"
    expected = [1.23e+47]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_real_fraction_exponent
    json = "[123.456e78]"
    expected = [1.23456e+80]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_real_neg_exp
    json = "[1e-2]"
    expected = [0.01]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_real_pos_exponent
    json = "[1e+2]"
    expected = [100.0]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_simple_int
    json = "[123]"
    expected = [123]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_simple_real
    json = "[123.456789]"
    expected = [123.456789]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object
    json = "{\"asd\":\"sdf\", \"dfg\":\"fgh\"}"
    expected = {"asd"=>"sdf", "dfg"=>"fgh"}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_basic
    json = "{\"asd\":\"sdf\"}"
    expected = {"asd"=>"sdf"}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_duplicated_key
    json = "{\"a\":\"b\",\"a\":\"c\"}"
    expected = {"a"=>"c"}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_duplicated_key_and_value
    json = "{\"a\":\"b\",\"a\":\"b\"}"
    expected = {"a"=>"b"}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_empty
    json = "{}"
    expected = {}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_empty_key
    json = "{\"\":0}"
    expected = {""=>0}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_escaped_null_in_key
    json = "{\"foo\\u0000bar\": 42}"
    expected = {"foo\u0000bar"=>42}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_extreme_numbers
    json = "{ \"min\": -1.0e+28, \"max\": 1.0e+28 }"
    expected = {"min"=>-1.0e+28, "max"=>1.0e+28}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_long_strings
    json = "{\"x\":[{\"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}], \"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}"
    expected = {"x"=>[{"id"=>"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}], "id"=>"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_simple
    json = "{\"a\":[]}"
    expected = {"a"=>[]}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_string_unicode
    json = "{\"title\":\"\\u041f\\u043e\\u043b\\u0442\\u043e\\u0440\\u0430 \\u0417\\u0435\\u043c\\u043b\\u0435\\u043a\\u043e\\u043f\\u0430\" }"
    expected = {"title"=>"–ü–æ–ª—Ç–æ—Ä–∞ –ó–µ–º–ª–µ–∫–æ–ø–∞"}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_with_newlines
    json = "{\n\"a\": \"b\"\n}"
    expected = {"a"=>"b"}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_1_2_3_bytes_UTF_8_sequences
    json = "[\"\\u0060\\u012a\\u12AB\"]"
    expected = ["`ƒ™·ä´"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_accepted_surrogate_pair
    json = "[\"\\uD801\\udc37\"]"
    expected = ["êê∑"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_accepted_surrogate_pairs
    json = "[\"\\ud83d\\ude39\\ud83d\\udc8d\"]"
    expected = ["üòπüíç"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_allowed_escapes
    json = "[\"\\\"\\\\\\/\\b\\f\\n\\r\\t\"]"
    expected = ["\"\\/\b\f\n\r\t"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_backslash_and_u_escaped_zero
    json = "[\"\\\\u0000\"]"
    expected = ["\\u0000"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_backslash_doublequotes
    json = "[\"\\\"\"]"
    expected = ["\""]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_comments
    json = "[\"a/*b*/c/*d//e\"]"
    expected = ["a/*b*/c/*d//e"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_double_escape_a
    json = "[\"\\\\a\"]"
    expected = ["\\a"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_double_escape_n
    json = "[\"\\\\n\"]"
    expected = ["\\n"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_escaped_control_character
    json = "[\"\\u0012\"]"
    expected = ["\u0012"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_escaped_noncharacter
    json = "[\"\\uFFFF\"]"
    expected = ["\uFFFF"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_in_array
    json = "[\"asd\"]"
    expected = ["asd"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_in_array_with_leading_space
    json = "[ \"asd\"]"
    expected = ["asd"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_last_surrogates_1_and_2
    json = "[\"\\uDBFF\\uDFFF\"]"
    expected = ["\u{10FFFF}"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_nbsp_uescaped
    json = "[\"new\\u00A0line\"]"
    expected = ["new¬†line"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_nonCharacterInUTF_8_U_10FFFF
    json = "[\"\u{10FFFF}\"]"
    expected = ["\u{10FFFF}"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_nonCharacterInUTF_8_U_FFFF
    json = "[\"\uFFFF\"]"
    expected = ["\uFFFF"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_null_escape
    json = "[\"\\u0000\"]"
    expected = ["\u0000"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_one_byte_utf_8
    json = "[\"\\u002c\"]"
    expected = [","]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_pi
    json = "[\"œÄ\"]"
    expected = ["œÄ"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_reservedCharacterInUTF_8_U_1BFFF
    json = "[\"\u{1BFFF}\"]"
    expected = ["\u{1BFFF}"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_simple_ascii
    json = "[\"asd \"]"
    expected = ["asd "]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_space
    json = "\" \""
    expected = " "

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_surrogates_U_1D11E_MUSICAL_SYMBOL_G_CLEF
    json = "[\"\\uD834\\uDd1e\"]"
    expected = ["ùÑû"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_three_byte_utf_8
    json = "[\"\\u0821\"]"
    expected = ["‡†°"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_two_byte_utf_8
    json = "[\"\\u0123\"]"
    expected = ["ƒ£"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_u_2028_line_sep
    json = "[\"\u2028\"]"
    expected = ["\u2028"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_u_2029_par_sep
    json = "[\"\u2029\"]"
    expected = ["\u2029"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_uEscape
    json = "[\"\\u0061\\u30af\\u30EA\\u30b9\"]"
    expected = ["a„ÇØ„É™„Çπ"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_uescaped_newline
    json = "[\"new\\u000Aline\"]"
    expected = ["new\nline"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_unescaped_char_delete
    json = "[\"\u007F\"]"
    expected = ["\u007F"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_unicode
    json = "[\"\\uA66D\"]"
    expected = ["Íô≠"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_unicodeEscapedBackslash
    json = "[\"\\u005C\"]"
    expected = ["\\"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_unicode_2
    json = "[\"‚çÇ„à¥‚çÇ\"]"
    expected = ["‚çÇ„à¥‚çÇ"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_unicode_U_10FFFE_nonchar
    json = "[\"\\uDBFF\\uDFFE\"]"
    expected = ["\u{10FFFE}"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_unicode_U_1FFFE_nonchar
    json = "[\"\\uD83F\\uDFFE\"]"
    expected = ["\u{1FFFE}"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_unicode_U_200B_ZERO_WIDTH_SPACE
    json = "[\"\\u200B\"]"
    expected = ["‚Äã"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_unicode_U_2064_invisible_plus
    json = "[\"\\u2064\"]"
    expected = ["‚Å§"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_unicode_U_FDD0_nonchar
    json = "[\"\\uFDD0\"]"
    expected = ["\uFDD0"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_unicode_U_FFFE_nonchar
    json = "[\"\\uFFFE\"]"
    expected = ["\uFFFE"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_unicode_escaped_double_quote
    json = "[\"\\u0022\"]"
    expected = ["\""]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_utf8
    json = "[\"‚Ç¨ùÑû\"]"
    expected = ["‚Ç¨ùÑû"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_with_del_character
    json = "[\"a\u007Fa\"]"
    expected = ["a\u007Fa"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_structure_lonely_false
    json = "false"
    expected = false

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_structure_lonely_int
    json = "42"
    expected = 42

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_structure_lonely_negative_real
    json = "-0.1"
    expected = -0.1

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_structure_lonely_null
    json = "null"
    expected = nil

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_structure_lonely_string
    json = "\"asd\""
    expected = "asd"

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_structure_lonely_true
    json = "true"
    expected = true

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_structure_string_empty
    json = "\"\""
    expected = ""

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_structure_trailing_newline
    json = "[\"a\"]\n"
    expected = ["a"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_structure_true_in_array
    json = "[true]"
    expected = [true]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_structure_whitespace_array
    json = " [] "
    expected = []

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_9223372036854775808_1
    json = "[-9223372036854775808]\n"
    expected = [-9223372036854775808]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_1_0
    json = "[1.0]\n"
    expected = [1.0]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_1_000000000000000005
    json = "[1.000000000000000005]\n"
    expected = [1.0]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_1000000000000000
    json = "[1000000000000000]\n"
    expected = [1000000000000000]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_10000000000000000999
    json = "[10000000000000000999]\n"
    expected = [10000000000000000999]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_1e_999
    json = "[1E-999]\n"
    expected = [0.0]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_1e6
    json = "[1E6]\n"
    expected = [1000000.0]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_9223372036854775807
    json = "[9223372036854775807]\n"
    expected = [9223372036854775807]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_number_9223372036854775808_2
    json = "[9223372036854775808]\n"
    expected = [9223372036854775808]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_key_nfc_nfd
    json = "{\"√©\":\"NFC\",\"eÃÅ\":\"NFD\"}"
    expected = {"√©"=>"NFC", "eÃÅ"=>"NFD"}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_key_nfd_nfc
    json = "{\"eÃÅ\":\"NFD\",\"√©\":\"NFC\"}"
    expected = {"eÃÅ"=>"NFD", "√©"=>"NFC"}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_same_key_different_values
    json = "{\"a\":1,\"a\":2}"
    expected = {"a"=>2}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_same_key_same_value
    json = "{\"a\":1,\"a\":1}"
    expected = {"a"=>1}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_object_same_key_unclear_values
    json = "{\"a\":0, \"a\":-0}\n"
    expected = {"a"=>0}

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_1_invalid_codepoint
    json = "[\"\xED\xA0\x80\"]"
    expected = ["\xED\xA0\x80"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_2_invalid_codepoints
    json = "[\"\xED\xA0\x80\xED\xA0\x80\"]"
    expected = ["\xED\xA0\x80\xED\xA0\x80"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_3_invalid_codepoints
    json = "[\"\xED\xA0\x80\xED\xA0\x80\xED\xA0\x80\"]"
    expected = ["\xED\xA0\x80\xED\xA0\x80\xED\xA0\x80"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
  def test_string_with_escaped_NULL
    json = "[\"A\\u0000B\"]"
    expected = ["A\u0000B"]

    actual = RapidJSON.parse(json)
    assert_equal expected, actual
  end
end
